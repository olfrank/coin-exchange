{"version":3,"sources":["components/COIN/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Td","styled","td","Button","button","Coin","props","name","ticker","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","AccountBalance","buttonText","content","amount","handleBalanceVisibility","H1","h1","Img","img","Header","header","ExchangeHeader","src","logo","alt","Component","formatPrice","parseFloat","Number","toFixed","Div","div","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","ticketUrl","newPrice","newCoinData","values","newValues","className","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAIUA,EAAKC,IAAOC,GAAV,sFAIFC,EAASF,IAAOG,OAAV,8NAQD,SAASC,EAAKC,GAMrB,OACI,+BACE,cAACN,EAAD,UAAKM,EAAMC,OACX,cAACP,EAAD,UAAKM,EAAME,SACX,eAACR,EAAD,eAAMM,EAAMG,SACXH,EAAMI,YAAc,cAACV,EAAD,UAAKM,EAAMK,UAAgB,KAChD,cAACX,EAAD,UACE,sBAAMY,OAAO,IAAIC,OAAQ,OAAzB,SACA,cAACV,EAAD,CAAQW,QAZA,SAACC,GACpBA,EAAMC,iBACNV,EAAMW,cAAcX,EAAMY,WAUf,4BCzBhB,I,IAAMC,EAAQlB,IAAOmB,MAAV,kMAUI,SAASC,EAASf,GACzB,OACI,eAACa,EAAD,WACI,gCACI,+BACC,sCACA,wCACA,uCACCb,EAAMI,YAAc,yCAAmB,KACxC,8CAIX,gCAEEJ,EAAMgB,SAASC,KAAK,gBAAEC,EAAF,EAAEA,IAAKjB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQG,EAArB,EAAqBA,QAASF,EAA9B,EAA8BA,MAA9B,OAClB,cAACJ,EAAD,CAEAY,cAAeX,EAAMW,cACrBV,KAAMA,EACNC,OAAQA,EACRE,YAAcJ,EAAMI,YACpBC,QAASA,EACTF,MAAOA,EACPS,SAAUM,GAPLA,WC3BnB,IAAMrB,EAASF,IAAOG,OAAV,sLAQNqB,EAAUxB,IAAOyB,QAAV,iFAIE,SAASC,EAAerB,GAC/B,IAAMsB,EAAYtB,EAAMI,YAAc,eAAiB,eACnDmB,EAAU,KAId,OAHIvB,EAAMI,cACPmB,EAAU,2DAAsBvB,EAAMwB,OAA5B,QAIT,eAACL,EAAD,WACKI,EACD,cAAC,EAAD,CAAQf,QAASR,EAAMyB,wBAAvB,SACKH,O,4CC5BN,MAA0B,iCCMnCI,EAAK/B,IAAOgC,GAAV,kFAIFC,EAAMjC,IAAOkC,IAAV,yGAOHC,EAASnC,IAAOoC,OAAV,qSAWSC,E,4JACjB,WACI,OACI,eAACF,EAAD,WACA,cAACF,EAAD,CAAKK,IAAKC,EAAMC,IAAI,SACpB,cAACT,EAAD,8C,GALgCU,a,gBCpBtCC,EAAa,SAAAlC,GAAK,OAAImC,WAAWC,OAAOpC,GAAOqC,QAAQ,KACvDC,EAAM9C,IAAO+C,IAAV,kKAyEMC,MAnEf,WAAe,IAAD,EACkBC,mBAAS,KAD3B,mBACLvC,EADK,aAE0BuC,oBAAS,IAFnC,mBAELxC,EAFK,KAEQyC,EAFR,OAGoBD,mBAAS,IAH7B,mBAGL5B,EAHK,KAGK8B,EAHL,KAMPC,EAAiB,uCAAG,oCAAAC,EAAA,sEACDC,IAAMC,IAAN,wCADC,cAClBC,EADkB,OAElBC,EAAUD,EAASE,KAAKC,MAAM,EAhBpB,IAgBmCrC,KAAI,SAAAsC,GAAI,OAAIA,EAAKC,MAClD,0CACZC,EAAWL,EAAQnC,KAAI,SAAAuC,GAAE,OAAIP,IAAMC,IADvB,0CACuCM,MAJjC,SAKDE,QAAQC,IAAIF,GALX,OAKlBzC,EALkB,OAMlB4C,EAAgB5C,EAASC,KAAI,SAASkC,GAC5C,IAAMI,EAAOJ,EAASE,KACrB,MAAO,CACLnC,IAAKqC,EAAKC,GACVvD,KAAMsD,EAAKtD,KACXC,OAAQqD,EAAKM,OACbxD,QAAS,EACTF,MAAOkC,EAAYkB,EAAKO,OAAOC,IAAI5D,WAGlC2C,EAAYc,GAhBQ,4CAAH,qDAmBtBI,qBAAU,WACe,IAApBhD,EAASiD,QACVlB,OAOJ,IAAMpC,EAAa,uCAAG,WAAOuD,GAAP,qBAAAlB,EAAA,6DACZmB,EADY,iDAC0CD,GAD1C,SAEKjB,IAAMC,IAAIiB,GAFf,OAEZhB,EAFY,OAGZiB,EAAW/B,EAAYc,EAASE,KAAKS,OAAOC,IAAI5D,OAChDkE,EAAcrD,EAASC,KAAI,SAASqD,GACxC,IAAIC,EAAS,eAAOD,GAIpB,OAHGJ,IAAkBI,EAAOpD,MAC1BqD,EAAUpE,MAAQiE,GAEbG,KAERzB,EAAYuB,GAXK,2CAAH,sDAejB,OACE,eAAC5B,EAAD,CAAK+B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAACnD,EAAD,CACEG,OAAQnB,EACRD,YAAaA,EACbqB,wBAxBR,WACEoB,GAAe,SAAA4B,GAAQ,OAAKA,QAyBxB,cAAC1D,EAAD,CACEC,SAAYA,EACZZ,YAAeA,EACfO,cAAiBA,QC/DZ+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b9e638ca.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport styled from 'styled-components'\n\n    const Td = styled.td`\n      border: 1px solid #cccccc;\n      width: 30vh;\n    `;\n    const Button = styled.button`\n      background: transparent;\n      border-radius: 3px;\n      border: 2px solid rgb(137, 180, 17);\n      color: rgb(137, 180, 17);\n      margin: 0.5em 1em;\n      padding: 0.25em 1em;\n    `;\nexport default function Coin(props) {\n  \n    const handleClick = (event) => {\n     event.preventDefault();\n     props.handleRefresh(props.tickerId);\n   }\n        return(\n            <tr>\n              <Td>{props.name}</Td>\n              <Td>{props.ticker}</Td>\n              <Td>${props.price}</Td>\n              {props.showBalance ? <Td>{props.balance}</Td> : null}\n              <Td>\n                <form action=\"#\" method =\"POST\">\n                <Button onClick= {handleClick}>REFRESH</Button>\n                </form>\n              </Td>\n            </tr>\n          );\n}\n\nCoin.propTypes = {\n  name: PropTypes.string.isRequired,\n  ticker: PropTypes.string.isRequired,\n  price: PropTypes.number.isRequired,\n}","import React from 'react'\nimport Coin from '../COIN/Coin';\nimport styled from 'styled-components'\n\n\nconst Table = styled.table`\n    margin: 50px auto 50px auto;\n    display: inline-block;\n    font-size: 1.4rem;margin: 50px auto 50px auto;\n    display: inline-block;\n    font-size: 1.4rem;\n`;\n    \n    \n    \nexport default function CoinList(props) {\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                     <th>Name</th>\n                     <th>Ticker</th>\n                     <th>Price</th>\n                     {props.showBalance ? <th>Balance</th> : null}\n                     <th>Actions</th>\n\n                    </tr>\n                </thead>\n          <tbody> \n            {\n            props.coinData.map( ({key, name, ticker, balance, price})=>\n              <Coin \n              key={key} \n              handleRefresh={props.handleRefresh}\n              name={name} \n              ticker={ticker} \n              showBalance= {props.showBalance}\n              balance={balance}\n              price={price}\n              tickerId={key}/>\n            )\n            }\n          </tbody>\n          </Table>\n        )\n    }\n\n","\nimport React from 'react'\nimport PropTypes from \"prop-types\";\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n    background: transparent;\n    border-radius: 3px;\n    border: 2px solid black;\n    color: black;\n    margin: 0.5em 1em;\n    padding: 0.25em 1em;\n`;\nconst Section = styled.section`\n    font-size: 2rem;\n    padding: 1.5rem 0 2rem 0;\n`;\nexport default function AccountBalance(props) {\n        const buttonText= props.showBalance ? 'Hide Balance' : 'Show Balance';\n        let content = null;\n        if( props.showBalance ) {\n           content = <> Account Balance: ${props.amount} </>;\n        }\n        return (\n            \n            <Section> \n                {content}\n                <Button onClick={props.handleBalanceVisibility}>\n                    {buttonText}\n                </Button>\n            </Section>\n        );\n}\n\n\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n  }","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\nimport logo from './logo.svg';\n\n\nconst H1 = styled.h1`\n    font-size: 4rem;\n    color: rgb(194, 194, 194);\n`;\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n    color: rgb(184, 63, 15) ;\n`;\n\n\nconst Header = styled.header`\n    background: linear-gradient(to right, rgb(60, 53, 63), rgb(98, 67, 109) );;\n    min-height: 20vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n `;\n\nexport default class ExchangeHeader extends Component {\n    render() {\n        return (\n            <Header>\n            <Img src={logo} alt=\"logo\" />\n            <H1>\n              OL FRANK'S COIN EXCHANGE\n            </H1>\n          </Header>\n        )\n    }\n}\n","import React, {useState, useEffect} from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport styled from 'styled-components'\nimport axios from 'axios';\n\nconst COIN_COUNT = 10;\nconst formatPrice= price => parseFloat(Number(price).toFixed(3));\nconst Div = styled.div`\n    text-align: center;\n    background: linear-gradient(to right, rgb(60, 53, 63), rgb(98, 67, 109) );\n    color: lightsalmon;\n    `;\n\nfunction App(){\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  \n const componentDidMount = async ()=>{\n   const response = await axios.get(`https://api.coinpaprika.com/v1/coins`)\n   const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n   const tickerURL = \"https://api.coinpaprika.com/v1/tickers/\";\n   const promises = coinIds.map(id => axios.get(tickerURL + id));\n   const coinData = await Promise.all(promises)\n   const coinPriceData = coinData.map(function(response){\n   const coin = response.data \n    return {\n      key: coin.id,\n      name: coin.name,\n      ticker: coin.symbol,\n      balance: 0,\n      price: formatPrice(coin.quotes.USD.price)\n     };\n   })\n       setCoinData(coinPriceData);\n   };\n  \n  useEffect(() => {\n    if(coinData.length === 0){\n      componentDidMount()\n    }\n  });\n\n  function handleBalanceVisibility() {\n    setShowBalance(oldValue => !oldValue);\n  }\n  const handleRefresh = async (valueChangeId) => {\n      const ticketUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n      const response = await axios.get(ticketUrl);\n      const newPrice = formatPrice(response.data.quotes.USD.price);\n      const newCoinData = coinData.map(function(values) {\n        let newValues = {...values};\n        if(valueChangeId === values.key){\n          newValues.price = newPrice; \n        }\n        return newValues;\n      });\n       setCoinData(newCoinData)\n  }\n  \n  \n    return (\n      <Div className=\"App\">\n        <ExchangeHeader/>\n        <AccountBalance \n          amount={balance} \n          showBalance={showBalance} \n          handleBalanceVisibility = {handleBalanceVisibility}/>\n\n        <CoinList \n          coinData = {coinData} \n          showBalance = {showBalance}\n          handleRefresh = {handleRefresh}/>\n        \n      </Div>\n    );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}